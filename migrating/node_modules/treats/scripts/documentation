#!/usr/bin/env node
//# vi: ft=javascript
const logger = require("./util/logger"),
    ROOT_PATH = process.cwd(),
    path = require("path"),
    fs = require("fs-extra"),
    glob = require("glob"),
    documentationLib = require("documentation"),
    createCanduit = require("canduit"),
    loadTreatsConfig = require("./util/load-config");

const documentation = argv => {
    try {
        if(argv.debug) {
            process.env.TREATS_SCRIPT_DEBUG = true;
        }
        const config = loadTreatsConfig({ webpack: false }),
            {command, target, directory: customDirectory} = argv,
            directory = customDirectory || path.join(ROOT_PATH, "./src"),
            defaultEmptyOutput =
                "<!-- Generated by documentation.js. Update this documentation by updating the source code. -->\n",
            storiesPlaceholder = "<!-- STORY -->";

        const filenames = glob.sync(`${!directory.endsWith("/") ? `${directory}/` : directory }**/*.js`);
        let handler;

        switch (command) {
            case "export":
            case "build":
                handler = (filename, processor) =>
                    documentationLib
                        .build(filename, { shallow: true })
                        .then(comments => documentationLib.formats.md(comments, {}))
                        .then(output => {
                            let filteredOutput = output.replace(defaultEmptyOutput, "");
                            if (filteredOutput && filteredOutput !== "") {
                                const mdPath = `${filename.substring(0, filename.length - 2)}md`,
                                    storiesPath = `${filename.substring(0, filename.length - 2)}stories.js`,
                                    specPath = `${filename.substring(0, filename.length - 2)}spec.js`;

                                if (
                                    filenames.indexOf(storiesPath) !== -1 &&
                                    filteredOutput.indexOf(storiesPlaceholder) === -1
                                ) {
                                    filteredOutput = `${storiesPlaceholder}
                                                    ${filteredOutput}
                                                    `;
                                }

                                fs.writeFileSync(mdPath, filteredOutput);
                                // eslint-disable-next-line no-console
                                logger("log", `Rewritten docs for ${filename}`);

                                if (processor) {
                                    processor(mdPath, filteredOutput);
                                }
                            }
                        });
                break;
            case "lint":
                handler = filename =>
                    documentationLib.lint(filename, { shallow: true }).then(lintOutput => {
                        if (lintOutput) {
                            // eslint-disable-next-line no-console
                            console.log(lintOutput);
                        }
                    });
                break;
            case "flush":
                handler = filename => {
                    const mdPath = `${filename.substring(0, filename.length - 2)}md`;
                    if (fs.pathExistsSync(mdPath)) {
                        fs.unlinkSync(mdPath);
                        // eslint-disable-next-line no-console
                        logger("log", `Deleted File ${mdPath}`);
                    }
                };
                break;
            default:
                handler = filename => {
                    // eslint-disable-next-line no-console
                    logger("debug", filename);
                };
        }

        const mdProcessor = processor => {
            filenames.forEach(filename => {
                if (!filename.match(/.*?(?=\.(spec|stories)).*?\.js/)) {
                    handler(filename, processor);
                }
            });
        };

        if (command === "export") {
            switch (target) {
                case "phriction":
                default:
                    if(!config.app || !config.app.phrictionSlug) {
                        logger("error", "Failed to export documentation to phriction, you must configure phrictionSlug in treats.config.js");
                        process.exit(1);
                    }
                    const slugDirectory = config.app.phrictionSlug;
                    createCanduit(path.join(ROOT_PATH, "./.arcrc"), (err, canduit) => {
                        const processor = (mdPath, output) => {
                            const slug = `${slugDirectory}${mdPath
                                    .replace(/\//g, "-")
                                    .replace("src-", "codes/")
                                    .replace(/.md$/, "")}`,
                                title = mdPath.replace(/.md$/, ""),
                                content = output,
                                jsonData = {
                                    slug,
                                    title,
                                    content,
                                    description: `Auto generated Documentation for ${title}`
                                };
                            canduit.exec("phriction.edit", jsonData, editErr => {
                                if (editErr && editErr !== null) {
                                    // eslint-disable-next-line no-console
                                    logger("log", `Error Editing Phriction for ${slug}, trying to create`);
                                    // eslint-disable-next-line no-console
                                    logger("error", editErr);
                                    canduit.exec("phriction.create", jsonData, createErr => {
                                        if (createErr && createErr !== null) {
                                            // eslint-disable-next-line no-console
                                            logger("error", `Error Creating Phriction for ${slug}!`);
                                            // eslint-disable-next-line no-console
                                            logger("error", createErr);
                                        } else {
                                            // eslint-disable-next-line no-console
                                            logger("debug", `Successfully Creating Phriction for ${slug}`);
                                        }
                                    });
                                } else {
                                    // eslint-disable-next-line no-console
                                    logger("debug", `Successfully Editing Phriction for ${slug}`);
                                }
                            });
                        };
                        mdProcessor(processor);
                    });
                    break;
            }
        } else {
            mdProcessor();
        }
    } catch(err) {
        logger("error", err);
    }
};

module.exports = documentation;
